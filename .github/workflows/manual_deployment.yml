name: Deploy to Production - Manual

on:
  workflow_dispatch:

jobs:
  build:
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Create .env file for frontend
      run: |
        echo "VUE_APP_AXIOS_BASE_URL=${{ secrets.VUE_APP_AXIOS_BASE_URL }}" > ./frontend/.env

    - name: Install dependencies
      run: npm ci
      working-directory: './frontend'

    - name: Build Prod
      run: npm run build --if-present
      working-directory: './frontend'

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "${{ secrets.SERVER_ADDRESS }}" >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        rsync -avz -e "ssh -i ~/.ssh/id_rsa" --exclude 'node_modules' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_ADDRESS }}:/var/www/html/multiple-criteria-decision-analysis &&
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_ADDRESS }} '
          cd /var/www/html/multiple-criteria-decision-analysis &&
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" > .env &&
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env &&
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env &&
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env &&
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env &&
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env &&
          python3.11 -m venv venv &&
          source venv/bin/activate &&
          pip install -r requirements.txt
        '
